---

# Remove app folder first, for a "clean" clone
- name: remove the app folder if present
  file:
    path: "{{ app_base_path }}/{{ item.key }}"
    state: absent
  when: item.value.mount is not defined
  with_dict: "{{ apps }}"

- name: clone apps
  git:
    repo: "{{ item.value.src | mandatory }}"
    depth: 1
    version: "{{ item.value.version | mandatory}}"
    dest: "{{ app_base_path }}/{{ item.key }}"
    accept_hostkey: yes
    update: yes
    force: yes
  when: item.value.mount is not defined
  with_dict: "{{ apps }}"

- set_fact:
    versions: {}

- include_tasks: version.yml
  with_dict: "{{ apps }}"
  loop_control:
    loop_var: app

- include_tasks: instance.yml
  with_dict: "{{ apps }}"
  loop_control:
    loop_var: app

- name: copy composer.lock (optional)
  template:
    src: "{{ app_templates_path }}/composer/{{ item.key }}/composer.lock"
    dest: "{{ item.value.deploy_path }}/composer.lock"
  when: (app_templates_path + '/composer/' + item.key + '/composer.lock') is is_file
  with_dict: "{{ apps }}"

- name: make sure composer cache dir exists
  file:
    path: "{{ composer_cache_dir }}"
    state: directory

- name: install apps dependencies (composer)
  composer:
    command: install
    prefer_dist: yes
    working_dir: "{{ app_base_path }}/{{ item.key }}"
  with_dict: "{{ apps }}"
  environment:
    COMPOSER_CACHE_DIR: "{{ composer_cache_dir }}"
